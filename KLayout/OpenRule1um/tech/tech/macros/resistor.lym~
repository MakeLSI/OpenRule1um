<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>The New Macro</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>true</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># PCell template

# It is recommended to put PCell code into namespaces.
# TODO: change the module name
module PCellPackageModule

  include RBA

  # Remove any definition of our classes (this helps when 
  # reexecuting this code after a change has been applied)
  # TODO: adjust the names
  PCellPackageModule.constants.member?(:PCell) &amp;&amp; remove_const(:PCell)
  
  # The PCell declaration
  # Each PCell must provide a declaration. It is recommended to use the PCell name as the class name.
  # TODO: change the class name
  class PCell &lt; PCellDeclarationHelper
  
    include RBA

    def initialize

      # Important: initialize the super class
      super

      # declare the parameters
      # i.e. param(:l, TypeLayer, "Layer", :default =&gt; LayerInfo::new(1, 0))
      #      param(:s, TypeShape, "", :default =&gt; DPoint::new(0, 0))

    end
  
    def display_text_impl
      # Provide a descriptive text for the cell
      "TODO: create description"
    end
    
    def coerce_parameters_impl
      # TODO: use x to access parameter x and set_x to modify it's value 
    end
    
    def produce_impl
      # TODO: produce the cell content 
      # i.e. cell.shapes(l_layer).insert(Polygon.new(...))
    end
  
    # optional:
    # def can_create_from_shape_impl
    #   TODO: determine if we have a shape that we can use to derive the 
    #   PCell parameters from and return true in that case
    # end
    # 
    # optional:
    # def parameters_from_shape_impl
    #   TODO: change parameters using set_x to reflect the parameter for the
    #   given shape
    # end
    # 
    # optional:
    # def transformation_from_shape_impl
    #   TODO: return a RBA::Trans object for the initial transformation of
    #   the instance
    # end
    
  end
  
  # TODO: add more PCell classes ..
  
  # Register a new library with the PCells
  library = Library::new

  # TODO: change the description
  library.description = "My PCell package"
      
  # register the PCell declarations
  # TODO: change the names
  library.layout.register_pcell("PCell", PCell::new)

  # TODO: register more PCell declarations ...
      
  # register our new library with the name "PCellPackage"
  # TODO: change the library name
  library.register("PCellPackage")
  
end
</text>
</klayout-macro>
