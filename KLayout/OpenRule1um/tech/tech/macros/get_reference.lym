<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>get_reference: prepare reference netlist and settings file for LVS</description>
 <version/>
 <category/>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>or1_macros</group-name>
 <menu-path>macros_menu.my_group&gt;end("OpenRule1um_Macros").end</menu-path>
 <interpreter>ruby</interpreter>
 <dsl-interpreter-name/>
 <text># OpenRule1um lvs preprocessor v1.8 Feb. 25, 2021 copy left by R. Okawa (okawa@ifdl.jp)
# Note: setting tolerance in get_reference is valid after KLayout 0.26.4
require 'fileutils'
require 'yaml'

# Return relationship to the variables and values used ".param"
def get_params lines
  p = {}
  lines.each_line{ |l|
    l.gsub! 00.chr, ''
    if l.upcase =~/\.PARAM\S* (\S+.*$)/
      params = $1.gsub(/ *= */, '=')
      params.split.each{ |equation|
        equation =~ /(\S+) *= *(\S+)/
        p[$1] = $2
      }
    end
  }
  p
end

# Return all lines of the file contents after comment out the line including ".include"
def expand_file file, lines
  # File.open(file, 'r:Windows-1252').read.encode('UTF-8', invalid: :replace).each_line{ |l|
  File.open(file, 'r:Windows-1252').read.encode('UTF-8').gsub(181.chr(Encoding::UTF_8), 'u').each_line{ |l|
    if l.chop =~ /.inc\S* +(\S+)/
      include_file = $1
      lines &lt;&lt; '*' + l
      if File.exist? include_file
        lines = expand_file include_file, lines
      end
    else
      lines &lt;&lt; l
    end
  }
  lines
end

module MyMacro

  include RBA

  # Get top cell object
  app = Application.instance
  mw = app.main_window
  cv = mw.current_view.active_cellview  # cell view
  raise 'Please save the layout first' if cv.nil? || cv.filename.nil? || cv.filename == ''
  cell = cv.cell
  
  # Choose reference netlist and setting the some files
  open_dir = ''  # you can write the path and uncomment out if you want to open the same directory always
  ### Tips : Open the window with the current directory (the directory of existing layout file) if you wirtten -&gt; open_dir = ''
  ###         After the next time, opening with the path of the last opened directory every time.
  if defined? open_dir
    netlist = QFileDialog::getOpenFileName(mw, 'Netlist file', open_dir, 'netlist(*.net *.cir *.sp *.spc)')  # return string of full path  netlist = netlist.force_encoding('UTF-8')
  else
    netlist = QFileDialog::getOpenFileName(mw, 'Netlist file', ENV['HOME'], 'netlist(*.net *.cir *.sp *.spc)')  # return string of full path  netlist = netlist.force_encoding('UTF-8')
  end
  # netlist = '/home/seijirom/Dropbox/work/LRmasterSlice/comparator/COMP_NLF.net'
  # raise "#{netlist} does not exist!" unless File.exist? netlist
  Dir.chdir File.dirname(cv.filename).force_encoding('UTF-8')  # the directory where exist GDS file set to the current directory
  ext_name = File.extname cv.filename  # get extension name of file
  target = File.basename(cv.filename).sub(ext_name, '')  # remove extension name part
  reference = "#{target}_reference.cir"  # file name of reference netlist
  ref={'target' =&gt; target, 'reference'=&gt; reference, 'netlist'=&gt; netlist, 'schematic' =&gt; netlist.sub('.net', '.asc')}
  File.open(target+'.yaml', 'w'){ |f| f.puts ref.to_yaml}  # generate setting file
  
  # Adjust contents of reference netlist
  desc = ''
  cells = []
  circuit_top = nil
  device_class = {} ##### ToDo : There is no code to add an element of the list
  lines = expand_file netlist, ''
  params = get_params lines
  # puts "***params: #{params.inspect}" ### for debug
  Dir.mkdir 'lvs_work' unless File.directory? 'lvs_work'
  c = File.open(File.join('lvs_work', File.basename(netlist))+'.txt', 'w:UTF-8')
  
  # Edit lines
  lines.each_line{ |l|
    l.gsub! 00.chr, ''
    l.tr! "@%-", "$$_" if l =~ /[@%-]/  # @, %, - are not supported to KLayout
    c.puts l
    
    if l=~ /(\S+)@or1_stdcells_v1/
      cells &lt;&lt; $1 unless cells.include? $1
    elsif l.match?(/^ *\.inc/)
      # Comment out .inc line
      l.sub! /^/, '*'
    elsif l=~/^(([mM]\S+) *\S+ *\S+ *\S+ *\S+ *(\S+)) *(.*)/
      # m parameter is not supported to KLayout
      # Change w parameter value when using m parameter
      # and other adjustment
      body = $1
      name=$2
      others = ($4 &amp;&amp; $4.upcase)
      model = $3
      body.sub!(model, 'NMOS') if model &amp;&amp; model.upcase =~ /NCH|NMOS/
      body.sub!(model, 'PMOS') if model &amp;&amp; model.upcase =~ /PCH|PMOS/
      p = {}
      others &amp;&amp; others.split.each{ |equation|
        if equation =~ /(\S+) *= *{(\S+)}/
          ov = $2
          p[$1] = params[ov.upcase] || ov
        elsif equation =~ /(\S+) *= *(\S+)/
          p[$1] = params[$2] || $2
        end
      }
      if p['M'] &amp;&amp; p['M'] &gt; "1"
        if p['W'] =~ /([^U]+) *(U*)/
          new_w  = "#{$1.to_i * p['M'].to_i}#{$2}"
          puts "Caution for #{name}: w=#{p['W']} replaced with w=#{new_w} because m=#{p['M']}"
          p['W'] = new_w
          p['M'] = '1'
        end
      end   
      # others = p.map{ |a| "#{a[0]}=#{a[1]}"}.join ' '
      others = "l=#{p['L']} w=#{p['W']}" # supress other parameters like as, ps, ad and pd
      l = "#{body} #{others}\n" # supress others like 'as= xxx ps=xxx'
    elsif l=~/^\.subckt *(\S+)/
      # If not defined subckt that the same of layout top cell name, 
      # and define subckt name different to top cell name,
      # then comment out lines except this circuit
      if $1 == cell.name
        circuit_top = $1 
        puts "circuit_top: #{circuit_top}"
      end
      if circuit_top.nil?
        new_desc = ''
        desc.each_line{ |l|
          l.sub! /^/, '*' unless l=~/^\*/
          new_desc &lt;&lt; l
        }
        desc = new_desc
      end
    elsif l.match?('.title KiCad schematic')
      # Commento out
      l.sub! /^/, '*'
    elsif l.upcase.match?('^V')
      # Comment out power devices line
      l.sub! /^/, '*'
    elsif l.upcase.match?('^\.AC|^\.DC|^\.TRAN|^\.STEP')
      # Comment out spice directive line
      l.sub! /^/, '*'
    elsif l.upcase.match?('^\.END$')
      # Replace .end -&gt; .ends
      l.sub! /$/, 's'
    else
      # Valiable by .param is not supported to KLayout
      # Replace to value
      if l =~ /{(\S+)}/
        ov = $1
        rv = params[ov.upcase] || ov  #  calculation for ov like (6u*20u) should be implemented
        l.sub! "{#{ov}}", rv
      end
    end
    desc &lt;&lt; l.upcase
  }
  c.close
  
  # Generate reference netlist after adjustment
  File.open(reference, 'w:UTF-8'){ |f| f.puts desc}
  
  # Make hard(symbolic) link
  slink = File.join('lvs_work', reference+'.txt')
  File.delete slink if File.exist?(slink)
  if /mswin32|mingw/ =~ RUBY_PLATFORM
    File.link reference, slink
  else
    File.symlink "../#{File.basename reference}", slink
  end

  puts "#{reference} created under #{Dir.pwd}"
  
  # Generate setting file for LVS
  # File.mkdir 'lvs_work' unless File.directory? 'lvs_work'   ###### ToDo :  this code already done in L70
  ['macros', 'pymacros', 'python', 'ruby', 'drc'].each{ |f| FileUtils.rm_rf f if File.directory? f}
  unless File.exist? "lvs_work/#{target}_lvs_settings.rb"
    File.open("lvs_work/#{target}_lvs_settings.rb", 'w'){ |f|
      
      f.puts 'def lvs_settings'
      f.puts "  same_circuits '#{cell.name}', '#{circuit_top ? circuit_top.upcase : '.TOP'}'"
      if cells.size &gt; 0
        or1_cells = %[an21 an31 an41 buf1 buf2 buf4 buf8 cinv clkbuf1 clkbuf2 clkinv1 clkinv2 dff1 exnr exor
                     inv1 inv1 inv2 inv4 inv8 na21 na212 na222 na31 na41 nr21 nr212 nr222 nr31 or21 or31
                     rff1 sdff1 sff1 srff1 ssff1]
        cells.each{ |c|
          if or1_cells.include? c
            f.puts "  same_circuits '#{c}', '#{c.upcase}$OR1_STDCELLS_V1'"
          end
        }
      end
      #f.puts "  align"
      #f.puts "  same_device_classes 'NMOS', 'NCH'"
      #f.puts "  same_device_classes 'PMOS', 'PCH'"
      f.puts "  netlist.flatten_circuit 'Nch*'"
      f.puts "  netlist.flatten_circuit 'Pch*'"
      f.puts 'end'
    }
  end
  
  unless File.exist? "lvs_work/#{target}_rc_ext_settings.rb"
    File.open("lvs_work/#{target}_rc_ext_settings.rb", 'w'){ |f|
      f.puts 'def rc_ext_settings'
      f.puts "  same_circuits '#{cell.name}', '#{circuit_top ? circuit_top.upcase : '.TOP'}'"
      f.puts "  align"
      device_class.each_pair{ |p, q|
        f.puts "  same_device_classes '#{p}', '#{q.upcase}'" if q
      }
      f.puts "  same_device_classes 'HRES', 'RES'"
      f.puts "  same_device_classes 'RES', 'RES'"
      f.puts "  tolerance 'HRES', 'R', relative: 0.03"
      f.puts "  tolerance 'RES', 'R', relative: 0.03"
      f.puts "  tolerance 'CAP', 'C', relative: 0.03"
      f.puts "  netlist.flatten_circuit 'Nch*'"
      f.puts "  netlist.flatten_circuit 'Pch*'"
      f.puts "  netlist.flatten_circuit 'R_poly*'"
      f.puts "  netlist.flatten_circuit 'HR_poly*'"
      f.puts "  netlist.combine_devices"
      f.puts "  schematic.combine_devices"
      f.puts 'end'
    }
  end
end
</text>
</klayout-macro>
