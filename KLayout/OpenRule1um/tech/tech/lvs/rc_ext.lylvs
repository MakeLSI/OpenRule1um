<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <version/>
 <category>lvs</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name>lvs_scripts</group-name>
 <menu-path>tools_menu.lvs.end</menu-path>
 <interpreter>dsl</interpreter>
 <dsl-interpreter-name>lvs-dsl-xml</dsl-interpreter-name>
 <text># OpenRule1um lvs rule for Analog v1.24 Sep. 6th, 2020 copy left by S. Moriyama (Anagix Corporation)
# note for Capacitor extraction
#   works only for Diffusion - Poly capacitance
#   experimental PIP capacitor works if CAP layer is used for 2nd Poly layer (do not use with Diff cap)
deep
report_lvs

# Drawing layers

nwl = input(1, 0)
nwl_dp = input(2, 0)
diff = input(3, 0) 
pol = input(5, 0)
hpol = input(6,0)
cnt = input(7, 0)
ml1 = input(8, 0)
via1 = input(9, 0) 
ml2 = input(10, 0)
via2 = input(11, 0)
ml3 = input(12, 0)
text = input(13, 0)
frame = input(14, 0)
res = input(15, 0)
cap = input(16, 0)
dio = input(17, 0)
parea = input(18, 0)
narea = input(19, 0)
pad = input(20, 0)
dm_dcn = input(101, 0)
dm_pcn = input(102, 0)
dm_nscn = input(103, 0)
dm_pscn = input(104, 0)
dm_via1 = input(105, 0)
dm_via2 = input(106, 0)

# Special layer for bulk terminals

bulk        = polygon_layer

# Computed layers
pol_in_hpol = pol &amp; hpol
pol_not_hpol = pol - hpol
pol_not_res  = pol_not_hpol - res
pol_in_res   = pol_not_hpol &amp; res

hpol_not_res  = pol_in_hpol - res
hpol_in_res   = pol_in_hpol &amp; res

cnt_in_cap = cnt &amp; cap
pol_overlapping_cap = pol_not_res.overlapping(cap) - pol_not_res.inside(cap)

diff_overlapping_cap = diff.overlapping(cap) - diff.inside(cap)

#diff_in_cap = diff &amp; cap
#diff_not_cap = diff - cap

diff_in_nwl = diff &amp; nwl
pdiff       = diff_in_nwl - narea
#pdiff       = diff_in_nwl &amp; parea
pgate       = pdiff &amp; pol_not_res
psd         = pdiff - pgate
ntie        = diff_in_nwl &amp; narea
# hv_pgate    = pgate &amp; thickox
# lv_pgate    = pgate - hv_pgate
lv_pgate = pgate
# hv_psd      = psd &amp; thickox
# lv_psd      = psd - thickox

diff_outside_nwl = diff - nwl
ndiff      = diff_outside_nwl - parea
#ndiff      = diff_outside_nwl &amp; narea
ngate      = ndiff &amp; pol_not_res 
nsd        = ndiff - ngate
ptie       = diff_outside_nwl &amp; dm_pscn #&amp; parea
# hv_ngate   = ngate &amp; thickox
# lv_ngate   = ngate - hv_ngate
lv_ngate = ngate
# hv_nsd     = nsd &amp; thickox
# lv_nsd     = nsd - thickox

# Device extraction  
# Capacitor extraction
area_cap = 1.72e-15
model_name = 'CAP'
extract_devices(capacitor(model_name, area_cap), {'P1'=&gt;pol_overlapping_cap, 'P2'=&gt; cap}) 

# model_name = 'DCAP'
area_cap = 2.60e-15
extract_devices(capacitor(model_name, area_cap), {'P1'=&gt;diff_overlapping_cap, 'P2'=&gt; cap})                    
# resistance extraction

model_name = "D"
pplus = pdiff - pdiff.interacting(pgate)
extract_devices(diode(model_name), { "P" =&gt; pplus, "N" =&gt; nwl })

sheet_rho = 20.0
model_name = "RES"
bbox = (res | cnt).extents
cap_layer = bbox - res
extract_devices(resistor(model_name, sheet_rho), {"R" =&gt;  pol_in_res, "C" =&gt; cap_layer,
                                                                'tA' =&gt; pol_not_res, 'tB'=&gt;pol_not_res  })# &amp; pol &amp; via1 &amp; ml1})
sheet_rho = 7000.0
model_name = "HRES"
bbox = (res | cnt).extents
cap_layer = bbox - res
extract_devices(resistor(model_name, sheet_rho), {"R" =&gt;  hpol_in_res, "C" =&gt;cap_layer,  'tA' =&gt; hpol_not_res, 'tB'=&gt;hpol_not_res  })

# PMOS transistor device extraction
extract_devices(mos4("PMOS"), { "SD" =&gt; psd, "G" =&gt; lv_pgate, "W" =&gt; nwl, 
                                "tS" =&gt; psd, "tD" =&gt; psd, "tG" =&gt;pol_not_res, "tW" =&gt; nwl })
# NMOS transistor device extraction
extract_devices(mos4("NMOS"), { "SD" =&gt; nsd, "G" =&gt; lv_ngate, "W" =&gt; bulk, 
                                "tS" =&gt; nsd, "tD" =&gt; nsd, "tG" =&gt;pol_not_res, "tW" =&gt; bulk })

# Define connectivity for netlist extraction

# Inter-layer
connect(psd,     cnt)
connect(nsd,     cnt)
# connect(pol,    cnt)
connect(pol_not_res, cnt)
connect(hpol_not_res, cnt)
connect(pol_overlapping_cap, cnt)
connect(diff_overlapping_cap, cnt)
connect(cap, cnt)
connect(pplus, cnt)

connect(cnt, ntie)
connect(nwl,   ntie)
connect(cnt, ptie)
connect(cnt, ml1)
connect(ml1,  via1)
connect(via1,     ml2)
connect(ml2, via2)
connect(via2, ml3)

# Global connections
connect_global(ptie, "SUBSTRATE")
connect_global(bulk, "SUBSTRATE")

sdir = File.dirname source.path
ext_name = File.extname source.path
target = File.basename(source.path).sub(ext_name, '')
reference = File.join(sdir, "#{target}_reference.cir")
output = File.join sdir, "#{target}_output.cir"
lvs_work = File.join(sdir, 'lvs_work')
Dir.mkdir lvs_work unless File.directory? lvs_work

if File.exist? File.join(sdir, target+'.yaml')
  require 'yaml'
  ref = YAML.load File.read(File.join sdir, target+'.yaml')
  if File.exist? ref['netlist']
    if File.exist?(ref['schematic']) &amp;&amp; (File.mtime(ref['netlist']) &lt; File.mtime(ref['schematic']))
      raise "netlist file '#{ref['netlist']}' is outdated!\nPlease update netlist and run get_reference again!"
    end
    if File.exist?(reference) &amp;&amp; (File.mtime(reference) &lt; File.mtime(ref['netlist']))
      raise "Please run get_reference because netlist file '#{ref['netlist']}'is modified"
    end
  end
end

if File.exist? File.join(sdir, target+'.yaml')
  require 'yaml'
  ref = YAML.load File.read(File.join sdir, target+'.yaml')
  if File.exist? ref['netlist']
    if File.exist?(ref['schematic']) &amp;&amp; (File.mtime(ref['netlist']) &lt; File.mtime(ref['schematic']))
      raise "netlist file '#{ref['netlist']}' is outdated!\nPlease update netlist and run get_reference again!"
    end
    if File.exist?(reference) &amp;&amp; (File.mtime(reference) &lt; File.mtime(ref['netlist']))
      raise "Please run get_reference because netlist file '#{ref['netlist']}'is modified"
    end
  end
end

# -------------------------------------------------------------------
# Netlist and compare

netlist.purge
# Hierarchy alignment (flatten out unmatched cells)

target_netlist(output, write_spice, "Created by KLayout")

if File.exist? reference
  schematic reference
  if File.exist? "#{lvs_work}/#{target}_rc_ext_settings.rb"
    load "#{lvs_work}/#{target}_rc_ext_settings.rb"
    rc_ext_settings
  end
# Netlist vs. netlist
  compare
  slink = "#{lvs_work}/#{File.basename output}.txt"
  File.delete slink if File.exist?(slink) || File.symlink?(slink)
  if /mswin32|mingw/ =~ RUBY_PLATFORM
    File.link output, slink
  else
    File.symlink "../#{File.basename output}", slink
  end
end
</text>
</klayout-macro>
